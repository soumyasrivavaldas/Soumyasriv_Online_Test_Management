***Database Schema and Initialization Scripts
-- schema.sql
CREATE TABLE users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT NOT NULL UNIQUE,
    hashed_password TEXT NOT NULL
);

***Dockerfile for Containerization
# Dockerfile
FROM python:3.9

# Set the working directory
WORKDIR /app

# Copy the requirements file
COPY requirements.txt .

# Install the dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy the FastAPI app code
COPY . .

# Expose the port
EXPOSE 8000

# Command to run the application
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]

1.Create and activate a virtual environment:
python -m venv env
source env/bin/activate  # On Windows use `env\Scripts\activate`

2.Install the dependencies:
pip install -r requirements.txt

3.Initialize the database:
./init_db.sh

4.Run the application:
uvicorn main:app --reload

FastAPI Application Code with Clear Documentation
python
Copy code
from fastapi import FastAPI, HTTPException, Depends
from pydantic import BaseModel
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session

# Database setup
DATABASE_URL = "sqlite:///./test.db"
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True)
    hashed_password = Column(String)

Base.metadata.create_all(bind=engine)

# FastAPI app initialization
app = FastAPI()

# Pydantic models
class UserCreate(BaseModel):
    username: str
    password: str

# Dependency
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@app.post("/users/", response_model=UserCreate)
def create_user(user: UserCreate, db: Session = Depends(get_db)):
    fake_hashed_password = user.password + "notreallyhashed"
    db_user = User(username=user.username, hashed_password=fake_hashed_password)
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user

@app.get("/users/{user_id}", response_model=UserCreate)
def read_user(user_id: int, db: Session = Depends(get_db)):
    db_user = db.query(User).filter(User.id == user_id).first()
    if db_user is None:
        raise HTTPException(status_code=404, detail="User not found")
    return db_user
Database Schema and Initialization Scripts
sql
Copy code
-- schema.sql
CREATE TABLE users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT NOT NULL UNIQUE,
    hashed_password TEXT NOT NULL
);
sh
Copy code
#!/bin/bash
# init_db.sh
sqlite3 ./test.db < schema.sql
Unit Tests for the Application
python
Copy code
from fastapi.testclient import TestClient
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
import pytest

from .main import app, get_db, Base

DATABASE_URL = "sqlite:///./test.db"

engine = create_engine(DATABASE_URL)
TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base.metadata.create_all(bind=engine)

@pytest.fixture(scope="module")
def client():
    def override_get_db():
        try:
            db = TestingSessionLocal()
            yield db
        finally:
            db.close()
    app.dependency_overrides[get_db] = override_get_db
    yield TestClient(app)

def test_create_user(client):
    response = client.post("/users/", json={"username": "testuser", "password": "testpassword"})
    assert response.status_code == 200
    data = response.json()
    assert data["username"] == "testuser"

def test_read_user(client):
    response = client.post("/users/", json={"username": "testuser2", "password": "testpassword2"})
    user_id = response.json()["id"]
    response = client.get(f"/users/{user_id}")
    assert response.status_code == 200
    data = response.json()
    assert data["username"] == "testuser2"
Dockerfile for Containerization
dockerfile
Copy code
# Dockerfile
FROM python:3.9

# Set the working directory
WORKDIR /app

# Copy the requirements file
COPY requirements.txt .

# Install the dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy the FastAPI app code
COPY . .

# Expose the port
EXPOSE 8000

# Command to run the application
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
README File
markdown
Copy code
# FastAPI User Management System

## Project Description

This project is a simple user management system built using FastAPI. It allows for creating and reading user data, storing this information in an SQLite database.

## Setup and Installation Instructions

1. **Clone the repository**:
   ```sh
   git clone https://github.com/yourusername/fastapi-user-management.git
   cd fastapi-user-management
Create and activate a virtual environment:

sh
Copy code
python -m venv env
source env/bin/activate  # On Windows use `env\Scripts\activate`
Install the dependencies:

sh
Copy code
pip install -r requirements.txt
Initialize the database:

sh
Copy code
./init_db.sh
Run the application:

sh
Copy code
uvicorn main:app --reload

***Instructions for Running the Application and Tests
1.Run the application:
uvicorn main:app --reload

2.Run the tests:
pytest

***Docker Setup Instructions
1.Build the Docker image
docker build -t fastapi-user-management .

2.Run the Docker container
docker run -d -p 8000:8000 fastapi-user-management

3.
This setup provides a complete guide to implementing, testing, and deploying a FastAPI application for managing users with an SQLite database, along with instructions for containerization using Docker.
